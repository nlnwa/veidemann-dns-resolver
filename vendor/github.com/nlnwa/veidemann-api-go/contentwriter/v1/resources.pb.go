// Code generated by protoc-gen-go. DO NOT EDIT.
// source: contentwriter/v1/resources.proto

package contentwriter

import (
	fmt "fmt"
	proto "github.com/golang/protobuf/proto"
	timestamp "github.com/golang/protobuf/ptypes/timestamp"
	math "math"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.ProtoPackageIsVersion3 // please upgrade the proto package

type RecordType int32

const (
	RecordType_WARCINFO     RecordType = 0
	RecordType_RESPONSE     RecordType = 1
	RecordType_RESOURCE     RecordType = 2
	RecordType_REQUEST      RecordType = 3
	RecordType_METADATA     RecordType = 4
	RecordType_REVISIT      RecordType = 5
	RecordType_CONVERSION   RecordType = 6
	RecordType_CONTINUATION RecordType = 7
)

var RecordType_name = map[int32]string{
	0: "WARCINFO",
	1: "RESPONSE",
	2: "RESOURCE",
	3: "REQUEST",
	4: "METADATA",
	5: "REVISIT",
	6: "CONVERSION",
	7: "CONTINUATION",
}

var RecordType_value = map[string]int32{
	"WARCINFO":     0,
	"RESPONSE":     1,
	"RESOURCE":     2,
	"REQUEST":      3,
	"METADATA":     4,
	"REVISIT":      5,
	"CONVERSION":   6,
	"CONTINUATION": 7,
}

func (x RecordType) String() string {
	return proto.EnumName(RecordType_name, int32(x))
}

func (RecordType) EnumDescriptor() ([]byte, []int) {
	return fileDescriptor_9b091cb7cc44d844, []int{0}
}

type CrawledContent struct {
	Digest               string               `protobuf:"bytes,1,opt,name=digest,proto3" json:"digest,omitempty"`
	WarcId               string               `protobuf:"bytes,2,opt,name=warc_id,json=warcId,proto3" json:"warc_id,omitempty"`
	TargetUri            string               `protobuf:"bytes,3,opt,name=target_uri,json=targetUri,proto3" json:"target_uri,omitempty"`
	Date                 *timestamp.Timestamp `protobuf:"bytes,4,opt,name=date,proto3" json:"date,omitempty"`
	XXX_NoUnkeyedLiteral struct{}             `json:"-"`
	XXX_unrecognized     []byte               `json:"-"`
	XXX_sizecache        int32                `json:"-"`
}

func (m *CrawledContent) Reset()         { *m = CrawledContent{} }
func (m *CrawledContent) String() string { return proto.CompactTextString(m) }
func (*CrawledContent) ProtoMessage()    {}
func (*CrawledContent) Descriptor() ([]byte, []int) {
	return fileDescriptor_9b091cb7cc44d844, []int{0}
}

func (m *CrawledContent) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_CrawledContent.Unmarshal(m, b)
}
func (m *CrawledContent) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_CrawledContent.Marshal(b, m, deterministic)
}
func (m *CrawledContent) XXX_Merge(src proto.Message) {
	xxx_messageInfo_CrawledContent.Merge(m, src)
}
func (m *CrawledContent) XXX_Size() int {
	return xxx_messageInfo_CrawledContent.Size(m)
}
func (m *CrawledContent) XXX_DiscardUnknown() {
	xxx_messageInfo_CrawledContent.DiscardUnknown(m)
}

var xxx_messageInfo_CrawledContent proto.InternalMessageInfo

func (m *CrawledContent) GetDigest() string {
	if m != nil {
		return m.Digest
	}
	return ""
}

func (m *CrawledContent) GetWarcId() string {
	if m != nil {
		return m.WarcId
	}
	return ""
}

func (m *CrawledContent) GetTargetUri() string {
	if m != nil {
		return m.TargetUri
	}
	return ""
}

func (m *CrawledContent) GetDate() *timestamp.Timestamp {
	if m != nil {
		return m.Date
	}
	return nil
}

type StorageRef struct {
	WarcId               string     `protobuf:"bytes,1,opt,name=warc_id,json=warcId,proto3" json:"warc_id,omitempty"`
	RecordType           RecordType `protobuf:"varint,2,opt,name=record_type,json=recordType,proto3,enum=veidemann.api.contentwriter.v1.RecordType" json:"record_type,omitempty"`
	StorageRef           string     `protobuf:"bytes,3,opt,name=storage_ref,json=storageRef,proto3" json:"storage_ref,omitempty"`
	XXX_NoUnkeyedLiteral struct{}   `json:"-"`
	XXX_unrecognized     []byte     `json:"-"`
	XXX_sizecache        int32      `json:"-"`
}

func (m *StorageRef) Reset()         { *m = StorageRef{} }
func (m *StorageRef) String() string { return proto.CompactTextString(m) }
func (*StorageRef) ProtoMessage()    {}
func (*StorageRef) Descriptor() ([]byte, []int) {
	return fileDescriptor_9b091cb7cc44d844, []int{1}
}

func (m *StorageRef) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_StorageRef.Unmarshal(m, b)
}
func (m *StorageRef) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_StorageRef.Marshal(b, m, deterministic)
}
func (m *StorageRef) XXX_Merge(src proto.Message) {
	xxx_messageInfo_StorageRef.Merge(m, src)
}
func (m *StorageRef) XXX_Size() int {
	return xxx_messageInfo_StorageRef.Size(m)
}
func (m *StorageRef) XXX_DiscardUnknown() {
	xxx_messageInfo_StorageRef.DiscardUnknown(m)
}

var xxx_messageInfo_StorageRef proto.InternalMessageInfo

func (m *StorageRef) GetWarcId() string {
	if m != nil {
		return m.WarcId
	}
	return ""
}

func (m *StorageRef) GetRecordType() RecordType {
	if m != nil {
		return m.RecordType
	}
	return RecordType_WARCINFO
}

func (m *StorageRef) GetStorageRef() string {
	if m != nil {
		return m.StorageRef
	}
	return ""
}

func init() {
	proto.RegisterEnum("veidemann.api.contentwriter.v1.RecordType", RecordType_name, RecordType_value)
	proto.RegisterType((*CrawledContent)(nil), "veidemann.api.contentwriter.v1.CrawledContent")
	proto.RegisterType((*StorageRef)(nil), "veidemann.api.contentwriter.v1.StorageRef")
}

func init() { proto.RegisterFile("contentwriter/v1/resources.proto", fileDescriptor_9b091cb7cc44d844) }

var fileDescriptor_9b091cb7cc44d844 = []byte{
	// 430 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0x84, 0x52, 0xcf, 0x6f, 0xd3, 0x30,
	0x14, 0xc6, 0x5b, 0x69, 0xd9, 0xeb, 0x54, 0x45, 0x3e, 0x8c, 0x6a, 0x12, 0xac, 0xda, 0xa9, 0x9a,
	0x34, 0x47, 0x1b, 0x47, 0x2e, 0x64, 0x21, 0x48, 0x11, 0x22, 0x19, 0x4e, 0xba, 0x49, 0x5c, 0x2a,
	0x37, 0x79, 0x0d, 0x96, 0x5a, 0x3b, 0x72, 0xdc, 0x56, 0xbb, 0x71, 0xe2, 0x8c, 0xc4, 0x3f, 0x8c,
	0x9a, 0xa4, 0x85, 0x72, 0x80, 0x9b, 0xbf, 0xef, 0x7b, 0x3f, 0xbe, 0xe7, 0xf7, 0x60, 0x94, 0x69,
	0x65, 0x51, 0xd9, 0x8d, 0x91, 0x16, 0x8d, 0xbb, 0xbe, 0x71, 0x0d, 0x56, 0x7a, 0x65, 0x32, 0xac,
	0x58, 0x69, 0xb4, 0xd5, 0xf4, 0xf5, 0x1a, 0x65, 0x8e, 0x4b, 0xa1, 0x14, 0x13, 0xa5, 0x64, 0x07,
	0xf1, 0x6c, 0x7d, 0x73, 0x7e, 0x51, 0x68, 0x5d, 0x2c, 0xd0, 0xad, 0xa3, 0x67, 0xab, 0xb9, 0x6b,
	0xe5, 0x12, 0x2b, 0x2b, 0x96, 0x65, 0x53, 0xe0, 0xf2, 0x07, 0x81, 0x81, 0x6f, 0xc4, 0x66, 0x81,
	0xb9, 0xdf, 0x24, 0xd3, 0x33, 0xe8, 0xe6, 0xb2, 0xc0, 0xca, 0x0e, 0xc9, 0x88, 0x8c, 0x4f, 0x78,
	0x8b, 0xe8, 0x4b, 0xe8, 0x6d, 0x84, 0xc9, 0xa6, 0x32, 0x1f, 0x1e, 0x35, 0xc2, 0x16, 0x86, 0x39,
	0x7d, 0x05, 0x60, 0x85, 0x29, 0xd0, 0x4e, 0x57, 0x46, 0x0e, 0x8f, 0x6b, 0xed, 0xa4, 0x61, 0x26,
	0x46, 0x52, 0x06, 0x9d, 0x5c, 0x58, 0x1c, 0x76, 0x46, 0x64, 0xdc, 0xbf, 0x3d, 0x67, 0x8d, 0x25,
	0xb6, 0xb3, 0xc4, 0xd2, 0x9d, 0x25, 0x5e, 0xc7, 0x5d, 0xfe, 0x24, 0x00, 0x89, 0xd5, 0x46, 0x14,
	0xc8, 0x71, 0xfe, 0x67, 0x5b, 0x72, 0xd0, 0xf6, 0x23, 0xf4, 0x0d, 0x66, 0xda, 0xe4, 0x53, 0xfb,
	0x54, 0x62, 0xed, 0x69, 0x70, 0x7b, 0xc5, 0xfe, 0xfd, 0x23, 0x8c, 0xd7, 0x29, 0xe9, 0x53, 0x89,
	0x1c, 0xcc, 0xfe, 0x4d, 0x2f, 0xa0, 0x5f, 0x35, 0x3d, 0xa7, 0x06, 0xe7, 0xed, 0x10, 0x50, 0xed,
	0x6d, 0x5c, 0x7d, 0x23, 0x00, 0xbf, 0x73, 0xe9, 0x29, 0xbc, 0x78, 0xf4, 0xb8, 0x1f, 0x46, 0x1f,
	0x62, 0xe7, 0xd9, 0x16, 0xf1, 0x20, 0xb9, 0x8f, 0xa3, 0x24, 0x70, 0x48, 0x8b, 0xe2, 0x09, 0xf7,
	0x03, 0xe7, 0x88, 0xf6, 0xa1, 0xc7, 0x83, 0xcf, 0x93, 0x20, 0x49, 0x9d, 0xe3, 0xad, 0xf4, 0x29,
	0x48, 0xbd, 0xf7, 0x5e, 0xea, 0x39, 0x9d, 0x46, 0x7a, 0x08, 0x93, 0x30, 0x75, 0x9e, 0xd3, 0x01,
	0x80, 0x1f, 0x47, 0x0f, 0x01, 0x4f, 0xc2, 0x38, 0x72, 0xba, 0xd4, 0x81, 0x53, 0x3f, 0x8e, 0xd2,
	0x30, 0x9a, 0x78, 0xe9, 0x96, 0xe9, 0xdd, 0x7d, 0x27, 0x30, 0x56, 0x9a, 0xa9, 0x19, 0x53, 0x4a,
	0xfc, 0x67, 0xce, 0xbb, 0xb3, 0x76, 0x9d, 0x8f, 0x35, 0xc3, 0x77, 0x77, 0x73, 0x4f, 0xbe, 0xbc,
	0x2b, 0xa4, 0xfd, 0xba, 0x9a, 0xb1, 0x4c, 0x2f, 0x5d, 0xb5, 0x50, 0x1b, 0xe1, 0xee, 0x4b, 0x5d,
	0x8b, 0x52, 0x5e, 0x17, 0xda, 0xfd, 0xfb, 0xee, 0xde, 0x1e, 0x10, 0xb3, 0x6e, 0xbd, 0xbb, 0x37,
	0xbf, 0x02, 0x00, 0x00, 0xff, 0xff, 0x71, 0x04, 0xa8, 0x9c, 0xa0, 0x02, 0x00, 0x00,
}
